<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat App - Dashboard</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <link rel="stylesheet" href="/public/styles.css">
</head>
<body>
  <header class="bg-primary text-white py-2 mb-4">
    <div class="container">
      <nav class="navbar navbar-expand-lg navbar-dark">
        <a class="navbar-brand" href="/">
          <i class="fas fa-comments"></i> Chat App
        </a>
      </nav>
    </div>
  </header>

  <div class="container">
    <div class="input-group mb-3">
      <input id="user-search-input" type="text" class="form-control" placeholder="Search users by username..." aria-label="Search">
      <div class="input-group-append">
        <button class="btn btn-outline-secondary" type="button">Search</button>
      </div>
    </div>
    <div class="search-results">
      <!-- Dynamically generated search results will be inserted here -->
    </div>

    <!-- Section for displaying friend requests -->
    <div class="friend-requests mt-4">
      <h3>Friend Requests</h3>
      <!-- Dynamically generated friend requests will be inserted here -->
    </div>
  </div>

  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.0.11/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <script src="/dashboard.js"></script>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const searchInput = document.querySelector('#user-search-input');
      const searchButton = document.querySelector('.input-group-append button');
      const searchResults = document.querySelector('.search-results');
      const friendRequestsContainer = document.querySelector('.friend-requests');

      // Function to perform the search
      async function performSearch() {
        const query = searchInput.value.trim();
        if (query.length > 0) {
          try {
            const response = await fetch(`/users/search?q=${encodeURIComponent(query)}`);
            const users = await response.json();
            searchResults.innerHTML = '';

            if (users.length > 0) {
              users.forEach(user => {
                const resultItem = document.createElement('div');
                resultItem.classList.add('result-item');
                resultItem.textContent = user.username;

                // Create "Add Friend" button
                const addFriendButton = document.createElement('button');
                addFriendButton.textContent = 'Add Friend';
                addFriendButton.classList.add('add-friend-button');
                addFriendButton.addEventListener('click', () => sendFriendRequest(user._id));

                resultItem.appendChild(addFriendButton);
                searchResults.appendChild(resultItem);
              });
            } else {
              searchResults.innerHTML = '<p>No users found.</p>';
            }
          } catch (error) {
            console.log('Error fetching search results:', error);
          }
        } else {
          searchResults.innerHTML = ''; // Clear results if input is empty
        }
      }

      // Function to send a friend request
      async function sendFriendRequest(recipientId) {
        try {
          const response = await fetch('/users/friends/request', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ recipientId })
          });

          const result = await response.json();
          alert(result.message); // Display success message or handle error
        } catch (error) {
          console.log('Error sending friend request:', error);
        }
      }

      // Function to accept a friend request
      async function acceptFriendRequest(requesterId) {
        try {
          const response = await fetch('/users/friends/accept', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ requesterId })
          });

          const result = await response.json();
          alert(result.message); // Display success message or handle error
        } catch (error) {
          console.log('Error accepting friend request:', error);
        }
      }

      // Function to reject a friend request
      async function rejectFriendRequest(requesterId) {
        try {
          const response = await fetch('/users/friends/reject', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ requesterId })
          });

          const result = await response.json();
          alert(result.message); // Display success message or handle error
        } catch (error) {
          console.log('Error rejecting friend request:', error);
        }
      }

      // Function to load friend requests
      async function loadFriendRequests() {
        try {
          const response = await fetch('/users/friends/requests');
          const requests = await response.json();
          friendRequestsContainer.innerHTML = '<h3>Friend Requests</h3>';

          requests.forEach(request => {
            const requestItem = document.createElement('div');
            requestItem.classList.add('request-item');
            requestItem.textContent = request.requesterUsername;

            // Create "Accept" button
            const acceptButton = document.createElement('button');
            acceptButton.textContent = 'Accept';
            acceptButton.classList.add('accept-button');
            acceptButton.addEventListener('click', () => acceptFriendRequest(request.requesterId));

            // Create "Reject" button
            const rejectButton = document.createElement('button');
            rejectButton.textContent = 'Reject';
            rejectButton.classList.add('reject-button');
            rejectButton.addEventListener('click', () => rejectFriendRequest(request.requesterId));

            requestItem.appendChild(acceptButton);
            requestItem.appendChild(rejectButton);
            friendRequestsContainer.appendChild(requestItem);
          });
        } catch (error) {
          console.log('Error loading friend requests:', error);
        }
      }

      // Trigger search when user types
      searchInput.addEventListener('input', performSearch);

      // Trigger search when user clicks the search button
      searchButton.addEventListener('click', performSearch);

      // Load friend requests on page load
      loadFriendRequests();
    });
  </script>
</body>
</html>
